
srvo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000579  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  00000709  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d9  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d1  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>
int main(void)
{
	DDRD |= 0xFF;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	81 bb       	out	0x11, r24	; 17
	DDRA=0x00;
  72:	1a ba       	out	0x1a, r1	; 26
	PINA=0x00;
  74:	19 ba       	out	0x19, r1	; 25
	TCCR1A |= 1<<WGM11 | 1<<COM1A1 | 1<<COM1A0;
  76:	8f b5       	in	r24, 0x2f	; 47
  78:	82 6c       	ori	r24, 0xC2	; 194
  7a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1<<WGM13 | 1<<WGM12 | 1<<CS10;
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	89 61       	ori	r24, 0x19	; 25
  80:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 19999;
  82:	8f e1       	ldi	r24, 0x1F	; 31
  84:	9e e4       	ldi	r25, 0x4E	; 78
  86:	97 bd       	out	0x27, r25	; 39
  88:	86 bd       	out	0x26, r24	; 38
	//OCR1A = ICR1 - 2000; //18000
     
	
	while (1)
	{
		if(PINA &(1<<0))
  8a:	c8 9b       	sbis	0x19, 0	; 25
  8c:	06 c0       	rjmp	.+12     	; 0x9a <main+0x2e>
		{
			OCR1A = ICR1 - 800;
  8e:	86 b5       	in	r24, 0x26	; 38
  90:	97 b5       	in	r25, 0x27	; 39
  92:	80 52       	subi	r24, 0x20	; 32
  94:	93 40       	sbci	r25, 0x03	; 3
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42
			//_delay_ms(100);
		}
		
		if(PINA &(1<<1))
  9a:	c9 9b       	sbis	0x19, 1	; 25
  9c:	f6 cf       	rjmp	.-20     	; 0x8a <main+0x1e>
		{
			
		OCR1A = ICR1 - 2200;
  9e:	86 b5       	in	r24, 0x26	; 38
  a0:	97 b5       	in	r25, 0x27	; 39
  a2:	88 59       	subi	r24, 0x98	; 152
  a4:	98 40       	sbci	r25, 0x08	; 8
  a6:	9b bd       	out	0x2b, r25	; 43
  a8:	8a bd       	out	0x2a, r24	; 42
  aa:	ef cf       	rjmp	.-34     	; 0x8a <main+0x1e>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
